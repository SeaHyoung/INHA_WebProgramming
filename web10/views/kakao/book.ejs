<div>
    <h1 class="text-center my-5"><%=title%></h1>
    <div class="row">
        <!-- col-md-4 : 컬럼이 12칸 중에서 미들 해상도인 경우 4칸 사용 -->
        <form name="frm" class="col-md-4 mb-3">
            <!-- input-group: input과 버튼 한줄 출력 -->
            <div class="input-group">
                <input name="query" class="form-control" value="바질" />
                <button class="btn btn-primary">검색</button>
            </div>
        </form>
    </div>

    <hr />

    <div id="div_list"></div>

    <div class="text-center">
        <button id="prev" class="btn btn-primary btn-sm">이전</button>
        <span id="page" class="mx-3">1</span>
        <button id="next" class="btn btn-primary btn-sm">다음</button>
    </div>
    <script type="x-handlebars-template" id="temp_list">
        <table class="table">
            {{#each documents}}
                <tr>
                    <td>
                        <!-- <img src="{{funThumbnail thumbnail}}" width="50px" info='{"title": "{{title}}", "thumbnail": "{{thumbnail}}", "isbn": "{{isbn}}", "price": "{{price}}", "authors": "{{authors}}", "publisher": "{{publisher}}"}'> -->
                        <a href="/kakao/book/info?title={{title}}&thumbnail={{thumbnail}}&price={{price}}&authors={{authors}}&publisher={{publisher}}&isbn={{isbn}}">
                            <img src="{{funThumbnail thumbnail}}" width="50px">
                        </a>
                    </td>
                    <td><div class="ellipsis">{{title}}</div></td>
                    <td>{{price}}</td>
                    <td>{{authors}}</td>
                    <td width="70"><%-include('modal_book.ejs')%></td>
                    <td width="70"><button class="btn btn-success btn-sm cart" book="{{strBook @this}}">카트</button></td>
                    <!-- book이라는 atribute 생성, 나 자신(this)에 대한 정보 전송 -->
                </tr>
            {{/each}}
        </table>
    </script>

    <!-- thumbnail 이미지 없는 경우 -->
    <script>
        Handlebars.registerHelper("funThumbnail", function (thumbnail) {
            if (thumbnail) {
                return thumbnail;
            } else {
                return "/images/no_image.png";
            }
        });
    </script>

    <script>
        Handlebars.registerHelper("strBook", function (book) {
            return JSON.stringify(book); //atibute값을 string으로 받아와서 해석 가능하게 함 (this를 book으로 받기)
            //카트버튼 우클릭 - 검사버튼 눌러서 string으로 모두 입력된 것 확인 가능
        });
    </script>
</div>

<script type="module">
    //firebase config.js 에서 import 하기 위해 type="module" 필요
    import { app } from "/javascripts/config.js";
    import {
        getDatabase,
        ref,
        set,
        get,
    } from "https://www.gstatic.com/firebasejs/10.13.2/firebase-database.js";
    const db = getDatabase(app);

    let page = 1;
    let size = 5;
    getList();

    // 각행의 카트 버튼을 클릭한 경우
    $("#div_list").on("click", ".cart", async function () {
        //카트 버튼이 여러개이기 때문에 class 로 .cart 선언
        //async : 동기화 함수
        if (email) {
            //uid, email 모두 가능(로그인 되어있을때)
            const book = JSON.parse($(this).attr("book"));
            const ref_cart = ref(db, `cart/${uid}/${book.isbn}`); //firebase 장바구니 저장 경로
            //백팁: js에서 변수+문자열 연결시
            const snapshot = await get(ref_cart); //get: 경로로 접근하기위함

            if (snapshot.val()) {
                alert("장바구니에 이미 존재하는 도서입니다.");
            } else {
                await set(ref_cart, book);
                alert("장바구니에 등록되었습니다.");
            }
        } else {
            //로그인 안되어있을 떄
            sessionStorage.setItem("target", window.location.href);
            location.href = "/users/login";
        }
    });

    // 각행의 이미지를 클릭한 경우
    // $("#div_list").on("click", "img", function () {
    //     let info = $(this).attr("info");
    //     info = JSON.parse(info);
    //     location.href = `/kakao/book/info?title=${info.title}&thumbnail=${info.thumbnail}&isbn=${info.isbn}&price=${info.price}&authors=${info.authors}&publisher=${info.publisher}&contents=${info.contents}`;
    // });

    $(frm).on("submit", function (e) {
        e.preventDefault();
        if ($(frm.query).val() == "") {
            //val
            alert("검색어를 입력하세요!");
            $(frm.query).focus(); //focus
            return;
        }
        page = 1;
        getList();
    });

    $("#prev").on("click", function () {
        page--;
        getList();
    });

    $("#next").on("click", function () {
        page++;
        getList();
    });

    function getList() {
        let query = $(frm.query).val();
        //카카오 API문서를 보면 url, query, Authorization등등 어떻게 넣어줘야 하는지 기술되어있음.
        // $는 jquery 딸깍
        $.ajax({
            //get은 카카오API문서에 호출방식이 get으로 적혀있기 때문.
            type: "get",
            url: `https://dapi.kakao.com/v3/search/book?target=title&size=${size}&query=${query}&page=${page}`, //백팁
            //data: { query: query, size: size, page }, //query 에는 검색어가 들어감
            headers: {
                Authorization: "KakaoAK 0b91218c084a28358b5d595792a6932d",
            },
            success: function (data) {
                // #temp_list 템플릿 내의 html #div_list <div> 에 집어넣기
                const temp = Handlebars.compile($("#temp_list").html());
                $("#div_list").html(temp(data));

                const last = Math.ceil(data.meta.pageable_count / size);
                $("#page").html(`${page}/${last}`);

                if (page == 1) $("#prev").attr("disabled", true);
                else $("#prev").attr("disabled", false);

                const is_end = data.meta.is_end;
                if (is_end) $("#next").attr("disabled", true);
                else $("#next").attr("disabled", false);
            },
        });
    }
</script>
